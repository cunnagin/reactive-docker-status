{"metadata":{"usedHelpers":["classCallCheck"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../imports/collections.js","imported":["dockerStatus"],"specifiers":[{"kind":"named","imported":"dockerStatus","local":"dockerStatus"}]},{"source":"dockerode","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Docker"}]},{"source":"docker-events","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DockerEvents"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var dockerStatus;module.import('../imports/collections.js',{\"dockerStatus\":function(v){dockerStatus=v}});var Docker;module.import('dockerode',{\"default\":function(v){Docker=v}});var DockerEvents;module.import('docker-events',{\"default\":function(v){DockerEvents=v}});\n// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\n\n\n\n\n\nMeteor.startup(function () {\n\tvar reactiveDockerStatus =\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\tfunction reactiveDockerStatus(argHostname, argPort, argCollectionName) {\n\t\t_classCallCheck(this, reactiveDockerStatus);\n\n\t\tself = this;\n\t\tthis.docker = new Docker({ host: argHostname, port: argPort });\n\t\tthis.emitter = new DockerEvents({ docker: docker });\n\n\t\tconsole.log(this.docker, this.emitter);\n\n\t\t// get handle to the collection name\n\t\tthis.collection = global[argCollectionName];\n\n\t\t// define emitter events\n\t\tthis.emitter.start();\n\n\t\tthis.emitter.on('connect', function () {\n\t\t\tconsole.log('Docker API Connected');\n\t\t});\n\n\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function (message) {\n\t\t\tconsole.log('...from docker: ' + JSON.stringify(message));\n\t\t\tif (message.status == 'start' || message.status == 'destroy') {\n\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function (err, result) {\n\t\t\t\t\tvar rec = { item: 'dockerList', data: result };\n\t\t\t\t\tcollection.upsert({ item: 'dockerList' }, rec);\n\t\t\t\t}));\n\t\t\t}\n\t\t}));\n\t\treturn this;\n\t};\n\n\t//var rds = new reactiveDockerStatus('http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n});","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":";;;;;;;AAMA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAA6B,2BAA7B;AACA,OAAO,MAAP,MAAmB,WAAnB;AACA,OAAO,YAAP,MAAyB,eAAzB;;AAEA,OAAO,OAAP,CAAe,YAAM;AAAA,KAEd,oBAFc;;;AAKnB,+BAAY,WAAZ,EAAyB,OAAzB,EAAkC,iBAAlC,EAAoD;AAAA;;AACnD,SAAO,IAAP;AACA,OAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,EAAC,MAAM,WAAP,EAAoB,MAAM,OAA1B,EAAX,CAAd;AACA,OAAK,OAAL,GAAe,IAAI,YAAJ,CAAiB,EAAC,QAAQ,MAAT,EAAjB,CAAf;;AAEA,UAAQ,GAAR,CAAY,KAAK,MAAjB,EAAyB,KAAK,OAA9B;;;AAGA,OAAK,UAAL,GAAkB,OAAO,iBAAP,CAAlB;;;AAGA,OAAK,OAAL,CAAa,KAAb;;AAEA,OAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B,YAAU;AACpC,WAAQ,GAAR,CAAY,sBAAZ;AACA,GAFD;;AAIA,OAAK,OAAL,CAAa,EAAb,CAAgB,UAAhB,EAA4B,OAAO,eAAP,CAAuB,UAAS,OAAT,EAAiB;AACnE,WAAQ,GAAR,sBAA+B,KAAK,SAAL,CAAe,OAAf,CAA/B;AACA,OAAK,QAAQ,MAAR,IAAgB,OAAjB,IAA4B,QAAQ,MAAR,IAAgB,SAAhD,EAA2D;AAC1D,SAAK,MAAL,CAAY,cAAZ,CAA2B,OAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACrE,SAAI,MAAM,EAAE,MAAM,YAAR,EAAsB,MAAM,MAA5B,EAAV;AACA,gBAAW,MAAX,CAAkB,EAAE,MAAM,YAAR,EAAlB,EAAyC,GAAzC;AACA,KAH0B,CAA3B;AAIA;AACD,GAR2B,CAA5B;AASA,SAAO,IAAP;AACA,EAhCkB;;;AAqCpB,CArCD","file":"/server/main.js.map","sourcesContent":["// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\nimport { dockerStatus } from '../imports/collections.js'\nimport Docker from 'dockerode'\nimport DockerEvents from 'docker-events' \n\nMeteor.startup(() => {\n\n\tclass reactiveDockerStatus {\n\t\t// this class object is used for each docker instance to monitor updates\n\t\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\t\tconstructor(argHostname, argPort, argCollectionName){\n\t\t\tself = this\n\t\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\t\tthis.emitter = new DockerEvents({docker: docker})\n\n\t\t\tconsole.log(this.docker, this.emitter)\n\n\t\t\t// get handle to the collection name\n\t\t\tthis.collection = global[argCollectionName]\n\n\t\t\t// define emitter events\n\t\t\tthis.emitter.start()\n\n\t\t\tthis.emitter.on('connect', function(){\n\t\t\t\tconsole.log('Docker API Connected')\n\t\t\t})\n\n\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { item: 'dockerList', data: result }\n\t\t\t\t\t\tcollection.upsert({ item: 'dockerList'}, rec)\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}))\n\t\t\treturn this\n\t\t}\n\t}\n\n\t//var rds = new reactiveDockerStatus('http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n})\n\n"]},"hash":"38c593f5a4bad722c80c2ff813d9bd74c76eb92b"}
