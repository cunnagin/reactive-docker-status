{"metadata":{"usedHelpers":["classCallCheck"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../imports/collections.js","imported":["dockerStatus"],"specifiers":[{"kind":"named","imported":"dockerStatus","local":"dockerStatus"}]},{"source":"dockerode","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Docker"}]},{"source":"docker-events","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DockerEvents"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var dockerStatus;module.import('../imports/collections.js',{\"dockerStatus\":function(v){dockerStatus=v}});var Docker;module.import('dockerode',{\"default\":function(v){Docker=v}});var DockerEvents;module.import('docker-events',{\"default\":function(v){DockerEvents=v}});\n// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\n\n\n\n\n\nMeteor.startup(function () {\n\tvar reactiveDockerStatus =\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\tfunction reactiveDockerStatus(argName, argHostname, argPort) {\n\t\t_classCallCheck(this, reactiveDockerStatus);\n\n\t\tif (!(reactiveDockerStatus.prototype.emitterList[argName] == undefined)) {\n\n\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { hostname: argHostname, port: argPort };\n\n\t\t\tconsole.log(JSON.stringify(reactiveDockerStatus.prototype.emitterList));\n\n\t\t\t// forgive me... our object root scope\n\t\t\tself = this;\n\n\t\t\t// check if there is already a reactive collection for this hostname\n\t\t\tthis.docker = new Docker({ host: argHostname, port: argPort });\n\t\t\tthis.emitter = new DockerEvents({ docker: this.docker });\n\n\t\t\t// define emitter events\n\t\t\tthis.emitter.start();\n\n\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function () {\n\t\t\t\tconsole.log('*** Docker API Connected ***');\n\t\t\t}));\n\n\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function (message) {\n\t\t\t\tconsole.log('...from docker: ' + JSON.stringify(message));\n\t\t\t\tif (message.status == 'start' || message.status == 'destroy') {\n\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function (err, result) {\n\t\t\t\t\t\tvar rec = { name: argName, data: result };\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName }, rec);\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn self;\n\t};\n\n\t// shared state tracking for emitter array\n\n\n\treactiveDockerStatus.prototype.emitterList = {};\n\n\t// create a reactive-docker-status object instance\n\tvar rds = new reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus');\n\tvar rds2 = new reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus');\n});","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":";;;;;;;AAMA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAA6B,2BAA7B;AACA,OAAO,MAAP,MAAmB,WAAnB;AACA,OAAO,YAAP,MAAyB,eAAzB;;AAEA,OAAO,OAAP,CAAe,YAAM;AAAA,KAEd,oBAFc;;;AAKnB,+BAAY,OAAZ,EAAqB,WAArB,EAAkC,OAAlC,EAA0C;AAAA;;AAEzC,MAAI,EAAE,qBAAqB,SAArB,CAA+B,WAA/B,CAA2C,OAA3C,KAAqD,SAAvD,CAAJ,EAAuE;;AAEtE,wBAAqB,SAArB,CAA+B,WAA/B,CAA2C,OAA3C,IAAsD,EAAE,UAAU,WAAZ,EAAyB,MAAM,OAA/B,EAAtD;;AAEA,WAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,qBAAqB,SAArB,CAA+B,WAA9C,CAAZ;;;AAGA,UAAO,IAAP;;;AAGA,QAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,EAAC,MAAM,WAAP,EAAoB,MAAM,OAA1B,EAAX,CAAd;AACA,QAAK,OAAL,GAAe,IAAI,YAAJ,CAAiB,EAAC,QAAQ,KAAK,MAAd,EAAjB,CAAf;;;AAGA,QAAK,OAAL,CAAa,KAAb;;AAEA,QAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B,OAAO,eAAP,CAAuB,YAAU;AAC3D,YAAQ,GAAR,CAAY,8BAAZ;AACA,IAF0B,CAA3B;;AAIA,QAAK,OAAL,CAAa,EAAb,CAAgB,UAAhB,EAA4B,OAAO,eAAP,CAAuB,UAAS,OAAT,EAAiB;AACnE,YAAQ,GAAR,sBAA+B,KAAK,SAAL,CAAe,OAAf,CAA/B;AACA,QAAK,QAAQ,MAAR,IAAgB,OAAjB,IAA4B,QAAQ,MAAR,IAAgB,SAAhD,EAA2D;AAC1D,UAAK,MAAL,CAAY,cAAZ,CAA2B,OAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACrE,UAAI,MAAM,EAAE,MAAM,OAAR,EAAiB,MAAM,MAAvB,EAAV;AACA,mBAAa,MAAb,CAAoB,EAAE,MAAM,OAAR,EAApB,EAAsC,GAAtC;AACA,MAH0B,CAA3B;AAIA;AACD,IAR2B,CAA5B;AASA;AACD,SAAO,IAAP;AACA,EAtCkB;;;;;AA0CpB,sBAAqB,SAArB,CAA+B,WAA/B,GAA6C,EAA7C;;;AAGA,KAAI,MAAM,IAAI,oBAAJ,CAAyB,YAAzB,EAAuC,sCAAvC,EAA+E,MAA/E,EAAuF,cAAvF,CAAV;AACA,KAAI,OAAO,IAAI,oBAAJ,CAAyB,YAAzB,EAAuC,sCAAvC,EAA+E,MAA/E,EAAuF,cAAvF,CAAX;AAEA,CAhDD","file":"/server/main.js.map","sourcesContent":["// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\nimport { dockerStatus } from '../imports/collections.js'\nimport Docker from 'dockerode'\nimport DockerEvents from 'docker-events' \n\nMeteor.startup(() => {\n\n\tclass reactiveDockerStatus {\n\t\t// this class object is used for each docker instance to monitor updates\n\t\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\t\tconstructor(argName, argHostname, argPort){\n\n\t\t\tif (!(reactiveDockerStatus.prototype.emitterList[argName]==undefined)) {\n\n\t\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { hostname: argHostname, port: argPort }\n\n\t\t\t\tconsole.log(JSON.stringify(reactiveDockerStatus.prototype.emitterList))\n\n\t\t\t\t// forgive me... our object root scope\n\t\t\t\tself = this\n\t\t\t\t\n\t\t\t\t// check if there is already a reactive collection for this hostname\n\t\t\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\t\t\tthis.emitter = new DockerEvents({docker: this.docker})\n\n\t\t\t\t// define emitter events\n\t\t\t\tthis.emitter.start()\n\n\t\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function(){\n\t\t\t\t\tconsole.log('*** Docker API Connected ***')\n\t\t\t\t}))\n\n\t\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t}))\n\t\t\t}\n\t\t\treturn self\n\t\t}\n\t}\n\n\t// shared state tracking for emitter array\n\treactiveDockerStatus.prototype.emitterList = {}\n\n\t// create a reactive-docker-status object instance\n\tvar rds = new reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\tvar rds2 = new reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n})\n\n"]},"hash":"c5d6a3d327c2df75769aebbf5a03cc16e9d017c5"}
