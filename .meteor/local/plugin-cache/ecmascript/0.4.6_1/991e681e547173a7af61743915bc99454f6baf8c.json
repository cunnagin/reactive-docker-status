{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../imports/collections.js","imported":["dockerStatus"],"specifiers":[{"kind":"named","imported":"dockerStatus","local":"dockerStatus"}]},{"source":"dockerode","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Docker"}]},{"source":"docker-events","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DockerEvents"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/cunnagin:reactive-docker-status/server/reactive-docker-status.js","filenameRelative":"/packages/cunnagin:reactive-docker-status/server/reactive-docker-status.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/cunnagin:reactive-docker-status/server/reactive-docker-status.js.map","sourceFileName":"/packages/cunnagin:reactive-docker-status/server/reactive-docker-status.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"reactive-docker-status"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _meteor = require('meteor/meteor');\n\nvar _collections = require('../imports/collections.js');\n\nvar _dockerode = require('dockerode');\n\nvar _dockerode2 = _interopRequireDefault(_dockerode);\n\nvar _dockerEvents = require('docker-events');\n\nvar _dockerEvents2 = _interopRequireDefault(_dockerEvents);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// Docker event stream\n\n// core server code to run on startup\n\n\n// the 2 heavy-lifter libraries\n// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\n_meteor.Meteor.startup(function () {\n\n\t// publish the 'dockerStatus' collection\n\t_meteor.Meteor.publish('dockerStatus', function () {\n\t\treturn _collections.dockerStatus.find();\n\t});\n\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\n\tvar reactiveDockerStatus = function reactiveDockerStatus(argName, argHostname, argPort) {\n\t\t(0, _classCallCheck3['default'])(this, reactiveDockerStatus);\n\n\n\t\t// if this is the 1st instantiation, better initialize the mongo collection\n\t\tif (Object.keys(reactiveDockerStatus.prototype.emitterList).length == 0) {\n\t\t\t_collections.dockerStatus.remove({}, function () {\n\t\t\t\tself.docker.listContainers(_meteor.Meteor.bindEnvironment(function (err, result) {\n\t\t\t\t\tvar rec = { name: argName, data: result };\n\t\t\t\t\t_collections.dockerStatus.upsert({ name: argName }, rec);\n\t\t\t\t}));\n\t\t\t});\n\t\t}\n\n\t\t// forgive me... our object root scope\n\t\tself = this;\n\n\t\t// check if there is already a reactive collection for this hostname\n\t\tthis.docker = new _dockerode2['default']({ host: argHostname, port: argPort });\n\t\tthis.emitter = new _dockerEvents2['default']({ docker: this.docker });\n\n\t\t// define emitter events\n\t\tthis.emitter.start();\n\n\t\tthis.emitter.on('connect', _meteor.Meteor.bindEnvironment(function () {\n\t\t\tconsole.log('*** Docker API Connected ***');\n\t\t}));\n\n\t\tthis.emitter.on('_message', _meteor.Meteor.bindEnvironment(function (message) {\n\t\t\tconsole.log('...from docker: ' + JSON.stringify(message));\n\t\t\tif (message.status == 'start' || message.status == 'destroy') {\n\t\t\t\tself.docker.listContainers(_meteor.Meteor.bindEnvironment(function (err, result) {\n\t\t\t\t\tvar rec = { name: argName, data: result };\n\t\t\t\t\t_collections.dockerStatus.upsert({ name: argName }, rec);\n\t\t\t\t}));\n\t\t\t}\n\t\t}));\n\n\t\t// add this object to the shared-state class-proto object for tracking\n\t\treactiveDockerStatus.prototype.emitterList[argName] = { name: argName, rdsObject: self };\n\n\t\treturn;\n\t};\n\n\t// shared data amongst the 'reactiveDockerStatus' objects\n\n\n\treactiveDockerStatus.prototype.emitterList = {};\n\n\t// create a couple of reactive-docker-status object instance\n\t//\tnew reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\t//\tnew reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n\t_meteor.Meteor.methods({\n\t\t'dockerStatusCreate': function dockerStatusCreate(argName, argHostname, argPort) {\n\t\t\tnew reactiveDockerStatus(argName, argHostname, argPort);\n\t\t}\n\t});\n}); // Docker API\n\n\n// my 'dockerstatus' mongodb collection","ast":null,"map":{"version":3,"sources":["/packages/cunnagin:reactive-docker-status/server/reactive-docker-status.js"],"names":[],"mappings":";;;;AAMA;;AAGA;;AAGA;;;;AACA;;;;;;;;;;;;;;;;;;AAGA,eAAO,OAAP,CAAe,YAAM;;;AAGpB,gBAAO,OAAP,CAAe,cAAf,EAA+B,YAAU;AACxC,SAAO,0BAAa,IAAb,EAAP;AACA,EAFD;;;;;AAHoB,KASd,oBATc,GAWnB,8BAAY,OAAZ,EAAqB,WAArB,EAAkC,OAAlC,EAA0C;AAAA;;;;AAGzC,MAAI,OAAO,IAAP,CAAY,qBAAqB,SAArB,CAA+B,WAA3C,EAAwD,MAAxD,IAAgE,CAApE,EAAuE;AACtE,6BAAa,MAAb,CAAoB,EAApB,EAAwB,YAAU;AAChC,SAAK,MAAL,CAAY,cAAZ,CAA2B,eAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACtE,SAAI,MAAM,EAAE,MAAM,OAAR,EAAiB,MAAM,MAAvB,EAAV;AACA,+BAAa,MAAb,CAAoB,EAAE,MAAM,OAAR,EAApB,EAAsC,GAAtC;AACA,KAH2B,CAA3B;AAID,IALD;AAMA;;;AAGD,SAAO,IAAP;;;AAGA,OAAK,MAAL,GAAc,2BAAW,EAAC,MAAM,WAAP,EAAoB,MAAM,OAA1B,EAAX,CAAd;AACA,OAAK,OAAL,GAAe,8BAAiB,EAAC,QAAQ,KAAK,MAAd,EAAjB,CAAf;;;AAGA,OAAK,OAAL,CAAa,KAAb;;AAEA,OAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B,eAAO,eAAP,CAAuB,YAAU;AAC3D,WAAQ,GAAR,CAAY,8BAAZ;AACA,GAF0B,CAA3B;;AAIA,OAAK,OAAL,CAAa,EAAb,CAAgB,UAAhB,EAA4B,eAAO,eAAP,CAAuB,UAAS,OAAT,EAAiB;AACnE,WAAQ,GAAR,sBAA+B,KAAK,SAAL,CAAe,OAAf,CAA/B;AACA,OAAK,QAAQ,MAAR,IAAgB,OAAjB,IAA4B,QAAQ,MAAR,IAAgB,SAAhD,EAA2D;AAC1D,SAAK,MAAL,CAAY,cAAZ,CAA2B,eAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACrE,SAAI,MAAM,EAAE,MAAM,OAAR,EAAiB,MAAM,MAAvB,EAAV;AACA,+BAAa,MAAb,CAAoB,EAAE,MAAM,OAAR,EAApB,EAAsC,GAAtC;AACA,KAH0B,CAA3B;AAIA;AACD,GAR2B,CAA5B;;;AAWA,uBAAqB,SAArB,CAA+B,WAA/B,CAA2C,OAA3C,IAAsD,EAAE,MAAM,OAAR,EAAiB,WAAW,IAA5B,EAAtD;;AAEA;AACA,EAnDkB;;;;;AAuDpB,sBAAqB,SAArB,CAA+B,WAA/B,GAA6C,EAA7C;;;;;;AAMA,gBAAO,OAAP,CAAe;AACd,wBAAsB,4BAAS,OAAT,EAAkB,WAAlB,EAA+B,OAA/B,EAAuC;AAC5D,OAAI,oBAAJ,CAAyB,OAAzB,EAAkC,WAAlC,EAA+C,OAA/C;AACA;AAHa,EAAf;AAOA,CApED,E","file":"/packages/cunnagin:reactive-docker-status/server/reactive-docker-status.js.map","sourcesContent":["// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\n\n// my 'dockerstatus' mongodb collection\nimport { dockerStatus } from '../imports/collections.js'\n\n// the 2 heavy-lifter libraries\nimport Docker from 'dockerode'\t\t\t\t// Docker API\nimport DockerEvents from 'docker-events' \t// Docker event stream\n\n// core server code to run on startup\nMeteor.startup(() => {\n\n\t// publish the 'dockerStatus' collection\n\tMeteor.publish('dockerStatus', function(){\n\t\treturn dockerStatus.find()\n\t})\n\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\tclass reactiveDockerStatus {\n\n\t\tconstructor(argName, argHostname, argPort){\n\n\t\t\t// if this is the 1st instantiation, better initialize the mongo collection\n\t\t\tif (Object.keys(reactiveDockerStatus.prototype.emitterList).length==0) {\n\t\t\t\tdockerStatus.remove({}, function(){\n\t\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t}))\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// forgive me... our object root scope\n\t\t\tself = this\n\t\t\t\n\t\t\t// check if there is already a reactive collection for this hostname\n\t\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\t\tthis.emitter = new DockerEvents({docker: this.docker})\n\n\t\t\t// define emitter events\n\t\t\tthis.emitter.start()\n\n\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function(){\n\t\t\t\tconsole.log('*** Docker API Connected ***')\n\t\t\t}))\n\n\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}))\n\n\t\t\t// add this object to the shared-state class-proto object for tracking\n\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { name: argName, rdsObject: self }\n\n\t\t\treturn\n\t\t}\n\t}\n\n\t// shared data amongst the 'reactiveDockerStatus' objects\n\treactiveDockerStatus.prototype.emitterList = {}\n\n\t// create a couple of reactive-docker-status object instance\n//\tnew reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n//\tnew reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n\tMeteor.methods({\n\t\t'dockerStatusCreate': function(argName, argHostname, argPort){\n\t\t\tnew reactiveDockerStatus(argName, argHostname, argPort)\n\t\t}\n\t})\n\n\n})\n"]},"hash":"991e681e547173a7af61743915bc99454f6baf8c"}
