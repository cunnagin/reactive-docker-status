[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"collections.js\":[\"meteor/mongo\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// imports/collections.js                                                                           //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nmodule.export({dockerStatus:function(){return dockerStatus}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                    //\n// For Docker report data storage in mongodDB                                                       //\nvar dockerStatus = new Mongo.Collection('dockerStatus');                                            // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/collections.js\",\"docker-events\",\"dockerode\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// server/main.js                                                                                   //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var dockerStatus;module.import('../imports/collections.js',{\"dockerStatus\":function(v){dockerStatus=v}});var DockerEvents;module.import('docker-events',{\"default\":function(v){DockerEvents=v}});\n                                                                                                    // 2\n                                                                                                    // 3\n                                                                                                    //\n//const DockerEvents = require('docker-events')                                                     //\n                                                                                                    //\n// Docker API - npm modules                                                                         //\nvar Docker = require('dockerode');                                                                  // 8\nvar docker = new Docker({ host: 'http://meteor-vm.ldd.rds.lexmark.com', port: '2375' });            // 9\n                                                                                                    //\nvar emitter = new DockerEvents({ docker: docker });                                                 // 11\n                                                                                                    //\nMeteor.startup(function () {                                                                        // 13\n                                                                                                    //\n\t//  WebApp.rawConnectHandlers.use(function(req, res, next){                                        //\n\t//  \tres.setHeader('Access-Control-Allow-Origin','*')                                              //\n\t//  \tnext()                                                                                        //\n\t//  })                                                                                             //\n                                                                                                    //\n});                                                                                                 // 20\n                                                                                                    //\nMeteor.methods({                                                                                    // 22\n                                                                                                    //\n\t_dockerList: function _dockerList() {                                                              // 24\n\t\tdocker.listContainers(Meteor.bindEnvironment(function (err, result) {                             // 25\n\t\t\tvar rec = { item: 'dockerList', data: result };                                                  // 26\n\t\t\tdockerStatus.upsert({ item: 'dockerList' }, rec);                                                // 27\n\t\t}));                                                                                              // 28\n\t}                                                                                                  // 29\n                                                                                                    //\n});                                                                                                 // 22\n                                                                                                    //\nvar cont = docker.getContainer('84f389d5484161358c18f7e3319cfe487a224e595b6c5e5b671838bb86e71b0a');\n                                                                                                    //\nemitter.start();                                                                                    // 35\n                                                                                                    //\nemitter.on('connect', function () {                                                                 // 37\n\tconsole.log('Docker API Connected');                                                               // 38\n});                                                                                                 // 39\n                                                                                                    //\nemitter.on('_message', Meteor.bindEnvironment(function (message) {                                  // 41\n\tconsole.log('...from docker: ' + JSON.stringify(message));                                         // 42\n\tif (message.status == 'start' || message.status == 'destroy') {                                    // 43\n\t\tdocker.listContainers(Meteor.bindEnvironment(function (err, result) {                             // 44\n\t\t\tvar rec = { item: 'dockerList', data: result };                                                  // 45\n\t\t\tdockerStatus.upsert({ item: 'dockerList' }, rec);                                                // 46\n\t\t}));                                                                                              // 47\n\t}                                                                                                  // 48\n}));                                                                                                // 49\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/collections.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;;AAGA,OAAO,IAAM,eAAe,IAAI,MAAM,UAAV,CAAqB,cAArB,CAArB,0C;;;;;;;;;;;ACHP,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAA6B,2BAA7B;AACA,OAAO,YAAP,MAAyB,eAAzB;;;;;AAKA,IAAI,SAAS,QAAQ,WAAR,CAAb;AACA,IAAI,SAAS,IAAI,MAAJ,CAAW,EAAC,MAAM,sCAAP,EAA+C,MAAM,MAArD,EAAX,CAAb;;AAEA,IAAI,UAAU,IAAI,YAAJ,CAAiB,EAAC,QAAQ,MAAT,EAAjB,CAAd;;AAEA,OAAO,OAAP,CAAe,YAAM;;;;;;;AAOpB,CAPD;;AASA,OAAO,OAAP,CAAe;;AAEd,cAAa,uBAAU;AACtB,SAAO,cAAP,CAAsB,OAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AAChE,OAAI,MAAM,EAAE,MAAM,YAAR,EAAsB,MAAM,MAA5B,EAAV;AACE,gBAAa,MAAb,CAAoB,EAAE,MAAM,YAAR,EAApB,EAA2C,GAA3C;AACA,GAHmB,CAAtB;AAIA;;AAPa,CAAf;;AAWA,IAAI,OAAO,OAAO,YAAP,CAAoB,kEAApB,CAAX;;AAEA,QAAQ,KAAR;;AAEA,QAAQ,EAAR,CAAW,SAAX,EAAsB,YAAU;AAC/B,SAAQ,GAAR,CAAY,sBAAZ;AACA,CAFD;;AAIA,QAAQ,EAAR,CAAW,UAAX,EAAuB,OAAO,eAAP,CAAuB,UAAS,OAAT,EAAiB;AAC9D,SAAQ,GAAR,sBAA+B,KAAK,SAAL,CAAe,OAAf,CAA/B;AACA,KAAK,QAAQ,MAAR,IAAgB,OAAjB,IAA4B,QAAQ,MAAR,IAAgB,SAAhD,EAA2D;AAC1D,SAAO,cAAP,CAAsB,OAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACjE,OAAI,MAAM,EAAE,MAAM,YAAR,EAAsB,MAAM,MAA5B,EAAV;AACC,gBAAa,MAAb,CAAoB,EAAE,MAAM,YAAR,EAApB,EAA2C,GAA3C;AACA,GAHqB,CAAtB;AAIA;AACD,CARsB,CAAvB,uG","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo'\r\n\r\n// For Docker report data storage in mongodDB\r\nexport const dockerStatus = new Mongo.Collection('dockerStatus')","import { Meteor } from 'meteor/meteor'\nimport { dockerStatus } from '../imports/collections.js'\nimport DockerEvents from 'docker-events' \n\n//const DockerEvents = require('docker-events')\n\n// Docker API - npm modules\nvar Docker = require('dockerode')\nvar docker = new Docker({host: 'http://meteor-vm.ldd.rds.lexmark.com', port: '2375' })\n\nvar emitter = new DockerEvents({docker: docker})\n\nMeteor.startup(() => {\n  \n//  WebApp.rawConnectHandlers.use(function(req, res, next){\n//  \tres.setHeader('Access-Control-Allow-Origin','*')\n//  \tnext()\n//  })\n\n});\n\nMeteor.methods({\n\n\t_dockerList: function(){\n\t\tdocker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\tvar rec = { item: 'dockerList', data: result }\n  \t\t\tdockerStatus.upsert({ item: 'dockerList'}, rec)\n  \t\t}))  \t\t\n\t}\n\n})\n\nvar cont = docker.getContainer('84f389d5484161358c18f7e3319cfe487a224e595b6c5e5b671838bb86e71b0a')\n\nemitter.start()\n\nemitter.on('connect', function(){\n\tconsole.log('Docker API Connected')\n})\n\nemitter.on('_message', Meteor.bindEnvironment(function(message){\n\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\tif ((message.status=='start')||(message.status=='destroy')){\n\t\tdocker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\tvar rec = { item: 'dockerList', data: result }\n\t\t\tdockerStatus.upsert({ item: 'dockerList'}, rec)\n\t\t}))\n\t}\n}))"]}}]