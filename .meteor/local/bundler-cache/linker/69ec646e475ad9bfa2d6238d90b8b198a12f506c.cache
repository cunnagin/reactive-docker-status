[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"collections.js\":[\"meteor/mongo\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// imports/collections.js                                                                        //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nmodule.export({dockerStatus:function(){return dockerStatus}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                 //\n// For Docker report data storage in mongodDB                                                    //\nvar dockerStatus = new Mongo.Collection('dockerStatus');                                         // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"server\":{\"main.js\":[\"babel-runtime/helpers/classCallCheck\",\"meteor/meteor\",\"../imports/collections.js\",\"dockerode\",\"docker-events\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// server/main.js                                                                                //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var dockerStatus;module.import('../imports/collections.js',{\"dockerStatus\":function(v){dockerStatus=v}});var Docker;module.import('dockerode',{\"default\":function(v){Docker=v}});var DockerEvents;module.import('docker-events',{\"default\":function(v){DockerEvents=v}});\n// package: npm                                                                                  //\n// end: server                                                                                   //\n// name: reactive-docker-status                                                                  //\n// author: stephen cunnagin                                                                      //\n// info: provides a reactive status for docker to a meteor application                           //\n                                                                                                 //\n                                                                                                 // 7\n                                                                                                 // 8\n                                                                                                 // 9\n                                                                                                 // 10\n                                                                                                 //\nvar reactiveDockerStatus =                                                                       //\n// this class object is used for each docker instance to monitor updates                         //\n// highly leveraging the great npm packages 'dockerode' & 'docker-events'                        //\nfunction reactiveDockerStatus(argHostname, argPort, argCollectionName) {                         // 15\n\t_classCallCheck(this, reactiveDockerStatus);                                                    // 15\n                                                                                                 //\n\tself = this;                                                                                    // 16\n\tthis.docker = new Docker({ host: argHostname, port: argPort });                                 // 17\n\tthis.emitter = new DockerEvents({ docker: docker });                                            // 18\n                                                                                                 //\n\tconsole.log(this.docker, this.emitter);                                                         // 20\n                                                                                                 //\n\t// get handle to the collection name                                                            //\n\tthis.collection = global[argCollectionName];                                                    // 23\n                                                                                                 //\n\t// define emitter events                                                                        //\n\tthis.emitter.start();                                                                           // 26\n                                                                                                 //\n\tthis.emitter.on('connect', Meteor.bindEnvironment(function () {                                 // 28\n\t\tconsole.log('Docker API Connected');                                                           // 29\n\t}));                                                                                            // 30\n                                                                                                 //\n\tthis.emitter.on('_message', Meteor.bindEnvironment(function (message) {                         // 32\n\t\tconsole.log('...from docker: ' + JSON.stringify(message));                                     // 33\n\t\tif (message.status == 'start' || message.status == 'destroy') {                                // 34\n\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function (err, result) {                    // 35\n\t\t\t\tvar rec = { item: 'dockerList', data: result };                                              // 36\n\t\t\t\tthis.collection.upsert({ item: 'dockerList' }, rec);                                         // 37\n\t\t\t}));                                                                                          // 38\n\t\t}                                                                                              // 39\n\t}));                                                                                            // 40\n\treturn this;                                                                                    // 41\n};                                                                                               // 42\n                                                                                                 //\nMeteor.startup(function () {                                                                     // 45\n                                                                                                 //\n\trds = new reactiveDockerStatus('http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus');\n});                                                                                              // 49\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/collections.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;;AAGA,OAAO,IAAM,eAAe,IAAI,MAAM,UAAV,CAAqB,cAArB,CAArB,uC;;;;;;;;;;;;;;;;;;ACGP,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAA6B,2BAA7B;AACA,OAAO,MAAP,MAAmB,WAAnB;AACA,OAAO,YAAP,MAAyB,eAAzB;;IAEM,oB;;;AAGL,8BAAY,WAAZ,EAAyB,OAAzB,EAAkC,iBAAlC,EAAoD;AAAA;;AACnD,QAAO,IAAP;AACA,MAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,EAAC,MAAM,WAAP,EAAoB,MAAM,OAA1B,EAAX,CAAd;AACA,MAAK,OAAL,GAAe,IAAI,YAAJ,CAAiB,EAAC,QAAQ,MAAT,EAAjB,CAAf;;AAEA,SAAQ,GAAR,CAAY,KAAK,MAAjB,EAAyB,KAAK,OAA9B;;;AAGA,MAAK,UAAL,GAAkB,OAAO,iBAAP,CAAlB;;;AAGA,MAAK,OAAL,CAAa,KAAb;;AAEA,MAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B,OAAO,eAAP,CAAuB,YAAU;AAC3D,UAAQ,GAAR,CAAY,sBAAZ;AACA,EAF0B,CAA3B;;AAIA,MAAK,OAAL,CAAa,EAAb,CAAgB,UAAhB,EAA4B,OAAO,eAAP,CAAuB,UAAS,OAAT,EAAiB;AACnE,UAAQ,GAAR,sBAA+B,KAAK,SAAL,CAAe,OAAf,CAA/B;AACA,MAAK,QAAQ,MAAR,IAAgB,OAAjB,IAA4B,QAAQ,MAAR,IAAgB,SAAhD,EAA2D;AAC1D,QAAK,MAAL,CAAY,cAAZ,CAA2B,OAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACrE,QAAI,MAAM,EAAE,MAAM,YAAR,EAAsB,MAAM,MAA5B,EAAV;AACA,SAAK,UAAL,CAAgB,MAAhB,CAAuB,EAAE,MAAM,YAAR,EAAvB,EAA8C,GAA9C;AACA,IAH0B,CAA3B;AAIA;AACD,EAR2B,CAA5B;AASA,QAAO,IAAP;AACA,C;;AAGF,OAAO,OAAP,CAAe,YAAM;;AAEpB,OAAM,IAAI,oBAAJ,CAAyB,sCAAzB,EAAiE,MAAjE,EAAyE,cAAzE,CAAN;AAEA,CAJD,qG","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo'\r\n\r\n// For Docker report data storage in mongodDB\r\nexport const dockerStatus = new Mongo.Collection('dockerStatus')","// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\nimport { dockerStatus } from '../imports/collections.js'\nimport Docker from 'dockerode'\nimport DockerEvents from 'docker-events' \n\nclass reactiveDockerStatus {\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\tconstructor(argHostname, argPort, argCollectionName){\n\t\tself = this\n\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\tthis.emitter = new DockerEvents({docker: docker})\n\n\t\tconsole.log(this.docker, this.emitter)\n\n\t\t// get handle to the collection name\n\t\tthis.collection = global[argCollectionName]\n\n\t\t// define emitter events\n\t\tthis.emitter.start()\n\n\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function(){\n\t\t\tconsole.log('Docker API Connected')\n\t\t}))\n\n\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\tlet rec = { item: 'dockerList', data: result }\n\t\t\t\t\tthis.collection.upsert({ item: 'dockerList'}, rec)\n\t\t\t\t}))\n\t\t\t}\n\t\t}))\n\t\treturn this\n\t}\n}\n\nMeteor.startup(() => {\n\n\trds = new reactiveDockerStatus('http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n})\n\n"]}}]