[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"collections.js\":[\"meteor/mongo\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// lib/collections.js                                                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nmodule.export({dockerStatus:function(){return dockerStatus}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                     //\n// For Docker report data storage in mongodDB                        //\nvar dockerStatus = new Mongo.Collection('dockerStatus');             // 4\n///////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./lib/collections.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/lib/collections.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;;AAGA,OAAO,IAAM,eAAe,IAAI,MAAM,UAAV,CAAqB,cAArB,CAArB,W","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\r\n\r\n// For Docker report data storage in mongodDB\r\nexport const dockerStatus = new Mongo.Collection('dockerStatus');"]}}]