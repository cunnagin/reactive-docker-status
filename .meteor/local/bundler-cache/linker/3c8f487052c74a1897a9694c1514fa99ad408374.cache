[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"collections.js\":[\"meteor/mongo\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// imports/collections.js                                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({dockerStatus:function(){return dockerStatus}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                                    //\n// For Docker report data storage in mongodDB                                                                       //\nvar dockerStatus = new Mongo.Collection('dockerStatus');                                                            // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"server\":{\"main.js\":[\"babel-runtime/helpers/classCallCheck\",\"meteor/meteor\",\"../imports/collections.js\",\"dockerode\",\"docker-events\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// server/main.js                                                                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var dockerStatus;module.import('../imports/collections.js',{\"dockerStatus\":function(v){dockerStatus=v}});var Docker;module.import('dockerode',{\"default\":function(v){Docker=v}});var DockerEvents;module.import('docker-events',{\"default\":function(v){DockerEvents=v}});\n// package: npm                                                                                                     //\n// end: server                                                                                                      //\n// name: reactive-docker-status                                                                                     //\n// author: stephen cunnagin                                                                                         //\n// info: provides a reactive status for docker to a meteor application                                              //\n                                                                                                                    //\n                                                                                                                    // 7\n                                                                                                                    // 8\n                                                                                                                    // 9\n                                                                                                                    // 10\n                                                                                                                    //\nMeteor.startup(function () {                                                                                        // 12\n\tvar reactiveDockerStatus =                                                                                         // 12\n\t// this class object is used for each docker instance to monitor updates                                           //\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'                                          //\n\tfunction reactiveDockerStatus(argName, argHostname, argPort) {                                                     // 17\n\t\t_classCallCheck(this, reactiveDockerStatus);                                                                      // 17\n                                                                                                                    //\n\t\tif (!(reactiveDockerStatus.prototype.emitterList[argName] == undefined)) {                                        // 19\n                                                                                                                    //\n\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { hostname: argHostname, port: argPort };                  // 21\n                                                                                                                    //\n\t\t\tconsole.log(JSON.stringify(reactiveDockerStatus.prototype.emitterList));                                         // 23\n                                                                                                                    //\n\t\t\t// forgive me... our object root scope                                                                           //\n\t\t\tself = this;                                                                                                     // 26\n                                                                                                                    //\n\t\t\t// check if there is already a reactive collection for this hostname                                             //\n\t\t\tthis.docker = new Docker({ host: argHostname, port: argPort });                                                  // 29\n\t\t\tthis.emitter = new DockerEvents({ docker: this.docker });                                                        // 30\n                                                                                                                    //\n\t\t\t// define emitter events                                                                                         //\n\t\t\tthis.emitter.start();                                                                                            // 33\n                                                                                                                    //\n\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function () {                                                  // 35\n\t\t\t\tconsole.log('*** Docker API Connected ***');                                                                    // 36\n\t\t\t}));                                                                                                             // 37\n                                                                                                                    //\n\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function (message) {                                          // 39\n\t\t\t\tconsole.log('...from docker: ' + JSON.stringify(message));                                                      // 40\n\t\t\t\tif (message.status == 'start' || message.status == 'destroy') {                                                 // 41\n\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function (err, result) {                                     // 42\n\t\t\t\t\t\tvar rec = { name: argName, data: result };                                                                    // 43\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName }, rec);                                                                  // 44\n\t\t\t\t\t}));                                                                                                           // 45\n\t\t\t\t}                                                                                                               // 46\n\t\t\t}));                                                                                                             // 47\n                                                                                                                    //\n\t\t\treturn self;                                                                                                     // 49\n\t\t}                                                                                                                 // 50\n\t};                                                                                                                 // 51\n                                                                                                                    //\n\t// shared state tracking for emitter array                                                                         //\n                                                                                                                    //\n                                                                                                                    //\n\treactiveDockerStatus.prototype.emitterList = {};                                                                   // 55\n                                                                                                                    //\n\t// create a reactive-docker-status object instance                                                                 //\n\tvar rds = new reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus');  // 58\n\tvar rds2 = new reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus');\n});                                                                                                                 // 61\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/collections.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;;AAGA,OAAO,IAAM,eAAe,IAAI,MAAM,UAAV,CAAqB,cAArB,CAArB,0D;;;;;;;;;;;;;;;;;;ACGP,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAA6B,2BAA7B;AACA,OAAO,MAAP,MAAmB,WAAnB;AACA,OAAO,YAAP,MAAyB,eAAzB;;AAEA,OAAO,OAAP,CAAe,YAAM;AAAA,KAEd,oBAFc;;;AAKnB,+BAAY,OAAZ,EAAqB,WAArB,EAAkC,OAAlC,EAA0C;AAAA;;AAEzC,MAAI,EAAE,qBAAqB,SAArB,CAA+B,WAA/B,CAA2C,OAA3C,KAAqD,SAAvD,CAAJ,EAAuE;;AAEtE,wBAAqB,SAArB,CAA+B,WAA/B,CAA2C,OAA3C,IAAsD,EAAE,UAAU,WAAZ,EAAyB,MAAM,OAA/B,EAAtD;;AAEA,WAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,qBAAqB,SAArB,CAA+B,WAA9C,CAAZ;;;AAGA,UAAO,IAAP;;;AAGA,QAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,EAAC,MAAM,WAAP,EAAoB,MAAM,OAA1B,EAAX,CAAd;AACA,QAAK,OAAL,GAAe,IAAI,YAAJ,CAAiB,EAAC,QAAQ,KAAK,MAAd,EAAjB,CAAf;;;AAGA,QAAK,OAAL,CAAa,KAAb;;AAEA,QAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B,OAAO,eAAP,CAAuB,YAAU;AAC3D,YAAQ,GAAR,CAAY,8BAAZ;AACA,IAF0B,CAA3B;;AAIA,QAAK,OAAL,CAAa,EAAb,CAAgB,UAAhB,EAA4B,OAAO,eAAP,CAAuB,UAAS,OAAT,EAAiB;AACnE,YAAQ,GAAR,sBAA+B,KAAK,SAAL,CAAe,OAAf,CAA/B;AACA,QAAK,QAAQ,MAAR,IAAgB,OAAjB,IAA4B,QAAQ,MAAR,IAAgB,SAAhD,EAA2D;AAC1D,UAAK,MAAL,CAAY,cAAZ,CAA2B,OAAO,eAAP,CAAuB,UAAS,GAAT,EAAa,MAAb,EAAoB;AACrE,UAAI,MAAM,EAAE,MAAM,OAAR,EAAiB,MAAM,MAAvB,EAAV;AACA,mBAAa,MAAb,CAAoB,EAAE,MAAM,OAAR,EAApB,EAAsC,GAAtC;AACA,MAH0B,CAA3B;AAIA;AACD,IAR2B,CAA5B;;AAUA,UAAO,IAAP;AACA;AACD,EAvCkB;;;;;AA2CpB,sBAAqB,SAArB,CAA+B,WAA/B,GAA6C,EAA7C;;;AAGA,KAAI,MAAM,IAAI,oBAAJ,CAAyB,YAAzB,EAAuC,sCAAvC,EAA+E,MAA/E,EAAuF,cAAvF,CAAV;AACA,KAAI,OAAO,IAAI,oBAAJ,CAAyB,YAAzB,EAAuC,sCAAvC,EAA+E,MAA/E,EAAuF,cAAvF,CAAX;AAEA,CAjDD,wH","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo'\r\n\r\n// For Docker report data storage in mongodDB\r\nexport const dockerStatus = new Mongo.Collection('dockerStatus')","// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\nimport { dockerStatus } from '../imports/collections.js'\nimport Docker from 'dockerode'\nimport DockerEvents from 'docker-events' \n\nMeteor.startup(() => {\n\n\tclass reactiveDockerStatus {\n\t\t// this class object is used for each docker instance to monitor updates\n\t\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\t\tconstructor(argName, argHostname, argPort){\n\n\t\t\tif (!(reactiveDockerStatus.prototype.emitterList[argName]==undefined)) {\n\n\t\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { hostname: argHostname, port: argPort }\n\n\t\t\t\tconsole.log(JSON.stringify(reactiveDockerStatus.prototype.emitterList))\n\n\t\t\t\t// forgive me... our object root scope\n\t\t\t\tself = this\n\t\t\t\t\n\t\t\t\t// check if there is already a reactive collection for this hostname\n\t\t\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\t\t\tthis.emitter = new DockerEvents({docker: this.docker})\n\n\t\t\t\t// define emitter events\n\t\t\t\tthis.emitter.start()\n\n\t\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function(){\n\t\t\t\t\tconsole.log('*** Docker API Connected ***')\n\t\t\t\t}))\n\n\t\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t}))\n\n\t\t\t\treturn self\n\t\t\t}\n\t\t}\n\t}\n\n\t// shared state tracking for emitter array\n\treactiveDockerStatus.prototype.emitterList = {}\n\n\t// create a reactive-docker-status object instance\n\tvar rds = new reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\tvar rds2 = new reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n})\n\n"]}}]