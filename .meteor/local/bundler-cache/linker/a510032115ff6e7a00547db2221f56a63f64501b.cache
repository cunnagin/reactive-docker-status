[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar self;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/cunnagin_reactive-docker-status/server/reactive-docker-status.js                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\n\n// my 'dockerstatus' mongodb collection\nimport { dockerStatus } from '../imports/collections.js'\n\n// the 2 heavy-lifter libraries\nimport Docker from 'dockerode'\t\t\t\t// Docker API\nimport DockerEvents from 'docker-events' \t// Docker event stream\n\n// core server code to run on startup\nMeteor.startup(() => {\n\n\t// publish the 'dockerStatus' collection\n\tMeteor.publish('dockerStatus', function(){\n\t\treturn dockerStatus.find()\n\t})\n\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\tclass reactiveDockerStatus {\n\n\t\tconstructor(argName, argHostname, argPort){\n\n\t\t\t// if this is the 1st instantiation, better initialize the mongo collection\n\t\t\tif (Object.keys(reactiveDockerStatus.prototype.emitterList).length==0) {\n\t\t\t\tdockerStatus.remove({}, function(){\n\t\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t}))\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// use this shared-state object to track new Docker emitter streams\n\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { hostname: argHostname, port: argPort }\n\t\t\tconsole.log(JSON.stringify(reactiveDockerStatus.prototype.emitterList))\n\n\t\t\t// forgive me... our object root scope\n\t\t\tself = this\n\t\t\t\n\t\t\t// check if there is already a reactive collection for this hostname\n\t\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\t\tthis.emitter = new DockerEvents({docker: this.docker})\n\n\t\t\t// define emitter events\n\t\t\tthis.emitter.start()\n\n\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function(){\n\t\t\t\tconsole.log('*** Docker API Connected ***')\n\t\t\t}))\n\n\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}))\n\n\t\t\treturn self\n\t\t}\n\t}\n\n\t// shared data amongst the 'reactiveDockerStatus' objects\n\treactiveDockerStatus.prototype.emitterList = {}\n\n\t// create a couple of reactive-docker-status object instance\n\tvar rds = new reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\tvar rds2 = new reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n})\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/cunnagin_reactive-docker-status/imports/collections.js                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nimport { Mongo } from 'meteor/mongo'\n\n// For Docker report data storage in mongodDB\nexport const dockerStatus = new Mongo.Collection('dockerStatus')\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cunnagin:reactive-docker-status'] = {};\n\n})();\n","servePath":"/packages/cunnagin_reactive-docker-status.js","sourceMap":{"version":3,"sources":["/packages/cunnagin_reactive-docker-status/server/reactive-docker-status.js","/packages/cunnagin_reactive-docker-status/imports/collections.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA,gE","file":"/packages/cunnagin_reactive-docker-status.js","sourcesContent":["// package: npm\n// end: server\n// name: reactive-docker-status\n// author: stephen cunnagin\n// info: provides a reactive status for docker to a meteor application\n\nimport { Meteor } from 'meteor/meteor'\n\n// my 'dockerstatus' mongodb collection\nimport { dockerStatus } from '../imports/collections.js'\n\n// the 2 heavy-lifter libraries\nimport Docker from 'dockerode'\t\t\t\t// Docker API\nimport DockerEvents from 'docker-events' \t// Docker event stream\n\n// core server code to run on startup\nMeteor.startup(() => {\n\n\t// publish the 'dockerStatus' collection\n\tMeteor.publish('dockerStatus', function(){\n\t\treturn dockerStatus.find()\n\t})\n\n\t// this class object is used for each docker instance to monitor updates\n\t// highly leveraging the great npm packages 'dockerode' & 'docker-events'\n\tclass reactiveDockerStatus {\n\n\t\tconstructor(argName, argHostname, argPort){\n\n\t\t\t// if this is the 1st instantiation, better initialize the mongo collection\n\t\t\tif (Object.keys(reactiveDockerStatus.prototype.emitterList).length==0) {\n\t\t\t\tdockerStatus.remove({}, function(){\n\t\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t}))\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// use this shared-state object to track new Docker emitter streams\n\t\t\treactiveDockerStatus.prototype.emitterList[argName] = { hostname: argHostname, port: argPort }\n\t\t\tconsole.log(JSON.stringify(reactiveDockerStatus.prototype.emitterList))\n\n\t\t\t// forgive me... our object root scope\n\t\t\tself = this\n\t\t\t\n\t\t\t// check if there is already a reactive collection for this hostname\n\t\t\tthis.docker = new Docker({host: argHostname, port: argPort })\n\t\t\tthis.emitter = new DockerEvents({docker: this.docker})\n\n\t\t\t// define emitter events\n\t\t\tthis.emitter.start()\n\n\t\t\tthis.emitter.on('connect', Meteor.bindEnvironment(function(){\n\t\t\t\tconsole.log('*** Docker API Connected ***')\n\t\t\t}))\n\n\t\t\tthis.emitter.on('_message', Meteor.bindEnvironment(function(message){\n\t\t\t\tconsole.log(`...from docker: ${JSON.stringify(message)}`)\n\t\t\t\tif ((message.status=='start')||(message.status=='destroy')){\n\t\t\t\t\tself.docker.listContainers(Meteor.bindEnvironment(function(err,result){\n\t\t\t\t\t\tlet rec = { name: argName, data: result }\n\t\t\t\t\t\tdockerStatus.upsert({ name: argName}, rec)\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}))\n\n\t\t\treturn self\n\t\t}\n\t}\n\n\t// shared data amongst the 'reactiveDockerStatus' objects\n\treactiveDockerStatus.prototype.emitterList = {}\n\n\t// create a couple of reactive-docker-status object instance\n\tvar rds = new reactiveDockerStatus('dockerList', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\tvar rds2 = new reactiveDockerStatus('dockerPoop', 'http://meteor-vm.ldd.rds.lexmark.com', '2375', 'dockerStatus')\n\n})\n\n","import { Mongo } from 'meteor/mongo'\n\n// For Docker report data storage in mongodDB\nexport const dockerStatus = new Mongo.Collection('dockerStatus')"]}}]